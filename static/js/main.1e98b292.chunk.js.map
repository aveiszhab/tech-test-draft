{"version":3,"sources":["requests/getImages.js","components/SearchForm.js","components/SearchResults.js","components/App.js","serviceWorker.js","index.js"],"names":["getImages","query","axios","method","url","params","q","then","response","data","collection","items","filter","image","media_type","map","img","links","href","catch","err","console","log","Promise","resolve","SearchForm","setSearchResultList","useState","searchText","setSearchText","isLoading","setIsLoading","isError","setIsError","handleSubmit","event","a","preventDefault","className","onSubmit","type","placeholder","onChange","e","target","value","name","SearchResults","results","length","key","src","alt","App","searchResults","setSearchResults","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yVAgCeA,EA9BG,SAACC,GACjB,OAAIA,EAIAC,IAAM,CACJC,OAAQ,MACRC,IAAK,qCACLC,OAAQ,CACNC,EAAGL,KAGNM,MAAK,SAACC,GAOL,OANqBA,EAASC,KAAKC,WAAWC,MACZC,QAAO,SAAAC,GACvC,MAAoC,UAA7BA,EAAMJ,KAAK,GAAGK,cAEKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,MAAM,GAAGC,WAIrDC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MApBPG,QAAQC,QAAQ,KCwDdC,EAvDI,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,OAGVF,oBAAS,GAHC,mBAGrCG,EAHqC,KAG1BC,EAH0B,OAIdJ,oBAAS,GAJK,mBAIrCK,EAJqC,KAI5BC,EAJ4B,KAUtCC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACnBL,GAAa,GACbI,EAAME,iBAFa,cAIjBX,EAJiB,SAIU1B,EAAU4B,GAJpB,oFAMjBK,GAAW,GANM,QAQnBF,GAAa,GARM,0DAAH,sDAWlB,OAAIC,EACK,sFAIP,oCACE,0BACEM,UAAU,cACVC,SAAUL,GAER,2BACEI,UAAU,eACVE,KAAK,OACLC,YAAY,sBACZC,SA7BgB,SAACC,GACzBd,EAAcc,EAAEC,OAAOC,UA+BjB,4BACEC,KAAK,KACLR,UAAU,gBACVE,KAAK,UAHP,QAQHV,GAAa,yBAAKQ,UAAU,aCpBpBS,G,MA3BO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEtB,OAAIA,EAAQC,OAKV,yBAAKX,UAAU,mBACb,oCACGU,EAAQjC,KAAI,SAAAF,GAAK,OAChB,yBACAqC,IAAKrC,EACLyB,UAAU,QACVa,IAAMtC,EACNuC,IAAI,oBAXJ,wBAAId,UAAU,aAAd,eCmBKe,MArBf,WAAgB,IAAD,EAE0B1B,mBAAS,IAFnC,mBAET2B,EAFS,KAEMC,EAFN,KAIb,OACE,yBAAKjB,UAAU,OACb,yBACAA,UAAU,YACVa,IAAI,yEACJC,IAAI,aAEJ,kBAAC,EAAD,CACE1B,oBAAsB6B,IAExB,kBAAC,EAAD,CACEP,QAAWM,MCRCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdnD,OAAM,SAAAoD,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.1e98b292.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst getImages = (query) => {\n  if(!query) {\n      return Promise.resolve([]);\n  } else {\n    return(\n      axios({\n        method: 'GET',\n        url: 'https://images-api.nasa.gov/search',\n        params: {\n          q: query\n        }\n      })\n      .then((response) => {\n        const imageResults = response.data.collection.items;\n        const parsedImages = imageResults.filter(image => {\n          return image.data[0].media_type === 'image'\n        });\n        const images = parsedImages.map(img => img.links[0].href);\n        \n        return images;\n      })\n      .catch((err) => {\n        console.log(err);\n      })  \n    )       \n  }\n};\n\n\n\nexport default getImages;","import React, {useState} from 'react';\nimport '../styles/SearchForm.css';\nimport getImages from '../requests/getImages'\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({setSearchResultList}) => {\n\n  const [searchText, setSearchText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false)\n\n  const handleInputChange = (e) => {\n    setSearchText(e.target.value)\n  };\n\n  const handleSubmit = async (event) => {\n    setIsLoading(true);\n    event.preventDefault();\n    try{\n      setSearchResultList( await getImages(searchText)); \n    } catch (error) {\n      setIsError(true);\n    }\n    setIsLoading(false);\n  }\n\n  if (isError) {\n    return <div>Sorry, something went wrong. Please refresh the page.</div>;\n  }\n\n  return (\n    <>\n      <form \n        className='search-form'\n        onSubmit={handleSubmit}\n      > \n          <input \n            className='search-input' \n            type='text'\n            placeholder='Search for an image'\n            onChange={handleInputChange}\n          />\n          \n          <button \n            name='go'\n            className='submit-button'\n            type='submit'\n          >\n            Go!\n          </button>    \n      </form>\n      {isLoading && <div className='loader'></div>}\n    </>\n  )\n}\n\nSearchForm.propTypes = {\n  setSearchResultList: PropTypes.func.isRequired\n};\n\nexport default SearchForm;","import React from 'react';\nimport '../styles/SearchResults.css';\nimport PropTypes from 'prop-types';\n\nconst SearchResults = ({results}) => {\n  \n  if(!results.length) {\n   return <h1 className='no-result'>No result</h1>\n  } else {  \n  \n  return(\n    <div className='image-container'>\n      <>\n        {results.map(image =>\n          <img\n          key={image}\n          className='image'\n          src= {image}\n          alt='spaceImage'\n        />\n        )}\n      </>\n    </div>\n  )\n        }\n};\n\nSearchResults.propTypes = {\n  results: PropTypes.array.isRequired\n};\n\nexport default SearchResults;","import React, {useState} from 'react';\nimport '../styles/App.css';\nimport SearchForm from './SearchForm';\nimport SearchResults from './SearchResults';\n\nfunction App() {\n\nconst[searchResults, setSearchResults] = useState([]);\n  \n  return (\n    <div className=\"App\">\n      <img\n      className='nasa-logo'\n      src='https://cdn.cnn.com/cnnnext/dam/assets/200424060716-nasa-worm-logo.jpg'\n      alt='NASAlogo'\n      />\n      <SearchForm \n        setSearchResultList= {setSearchResults}\n      />\n      <SearchResults \n        results = {searchResults}\n      />  \n    </div>\n  );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}